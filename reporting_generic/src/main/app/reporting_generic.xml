<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <flow name="ingest_reportingFlow">
        <amqp:inbound-endpoint queueName="reporting_requests" responseTimeout="10000" exchange-pattern="request-response" connector-ref="AMQP_0_9_Connector" doc:name="reporting_requests">
            <reconnect/>
        </amqp:inbound-endpoint>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <flow-ref name="initialize_variables" doc:name="initialize_variables"/>
        <set-variable variableName="query" value="#['+(MediaObjectFragmentDepartmentName:'+flowVars.tenant+')+(MediaObjectArchiveDate:[\&quot;' + flowVars.dateFrom + '\&quot; TO \&quot;' + flowVars.dateTo + '\&quot;])']" doc:name="Set query"/>
        <http:request config-ref="HTTP_Request_Configuration" path="resources/media/" method="GET" doc:name="Request Mediahaven">
            <http:request-builder>
                <http:query-param paramName="q" value="#[flowVars.query]"/>
                <http:query-param paramName="nrOfResults" value="1"/>
                <http:query-param paramName="startindex" value="0"/>
                <http:header headerName="Authorization" value="#[flowVars.authKey]"/>
            </http:request-builder>
        </http:request>
       	<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to hashmap"/>
        <set-variable variableName="totalCount" value="#[payload['totalNrOfResults']]" doc:name="Set totalCount"/>
        <choice doc:name="If totalCount &lt; page size, don't paginate">
            <when expression="">
                <set-variable variableName="pageCount" value="#[(java.lang.Double) (flowVars.totalCount / '${page.size}')]" doc:name="Set pageCount"/>
                <set-variable variableName="roundedPageCount" value="#[(java.lang.Integer) java.lang.Math.ceil(flowVars.pageCount)]" doc:name="Set roundedPageCount"/>
                <set-variable variableName="array" value="#[new java.lang.String[flowVars.roundedPageCount]]" doc:name="Init array"/>
            </when>
            <otherwise>
        	   <set-variable variableName="array" value="#[new java.lang.String[1]]" doc:name="Init array with size 1"/>
            </otherwise>
        </choice>
        <foreach collection="#[flowVars.array]" doc:name="For Each">
            <logger message="#[&quot;Counter: &quot; + flowVars.counter]" level="INFO" doc:name="Logger"/>
            <http:request config-ref="HTTP_Request_Configuration" path="resources/media/" method="GET" doc:name="Get page">
            	<http:request-builder>
                    <http:query-param paramName="q" value="#[flowVars.query]"/>
                    <http:query-param paramName="nrOfResults" value="#['${page.size}']"/>
                    <http:query-param paramName="startIndex" value="#[(flowVars.counter - 1) * '${page.size}']"/>
                    <http:header headerName="Authorization" value="#[flowVars.authKey]"/>
            	</http:request-builder>
        	</http:request>
            <json:json-to-object-transformer doc:name="JSON to HashMap" returnClass="java.util.HashMap"/>
            <foreach collection="#[payload['mediaDataList']]" counterVariableName="innerCounter" doc:name="For Each mediaDataList">
                <choice doc:name="Check status is FINISHED">
                    <when expression="#[!payload.status.equals(&quot;FINISHED&quot;)]">
                        <logger message="Status is not finished: #[payload]" level="WARN" doc:name="Not finished status"/>
                    </when>
                    <otherwise>
                        <set-variable variableName="pid" value="#[payload['externalId']]" doc:name="Set pid"/>
                        <logger message="#[&quot;PID: &quot; + flowVars.pid]" level="INFO" doc:name="Logger"/>
                        <set-variable variableName="archiveDate" value="#[payload['archiveDate']]" doc:name="Set archiveDate"/>
                        <set-variable variableName="dc_identifier_cpid" value="#['']" doc:name="Set dc_identifier_cpid"/>
                        <foreach collection="#[payload['mdProperties']]" doc:name="For Each">
                            <choice doc:name="Is dc_identifier_cpid?">
                                <when expression="#[!payload['attribute'].equals('dc_identifier_cpid')]">
                                    <logger level="INFO" doc:name="Nope"/>
                                </when>
                                <otherwise>
                                    <set-variable variableName="dc_identifier_cpid" value="#[payload['value']]" doc:name="Set dc_identifier_cpid"/>
                                </otherwise>
                            </choice>
                            <choice doc:name="Is dc_identifier_localid?">
                                <when expression="#[!payload['attribute'].equals('dc_identifier_localid')]">
                                    <logger level="INFO" doc:name="Nope"/>
                                </when>
                                <otherwise>
                                    <set-variable variableName="dc_identifier_cpid" value="#[payload['value']]" doc:name="Set dc_identifier_cpid"/>
                                </otherwise>
                            </choice>
                            <choice doc:name="Is dc_identifier_cpids and no cpid already found?">
                                <when expression="#[flowVars.dc_identifier_cpid != null || !payload['attribute'].equals('dc_identifier_cpids')]">
                                    <logger level="INFO" doc:name="Logger"/>
                                </when>
                                <otherwise>
                                    <set-variable variableName="dc_identifier_cpid" value="#[payload['value']['attributeValueList'][0]['value']]" doc:name="Set dc_identifier_cpid with first value"/>
                                </otherwise>
                            </choice>
                            <choice doc:name="Is dc_identifier_localids?">
                                <when expression="#[flowVars.dc_identifier_cpid != null || !payload['attribute'].equals('dc_identifier_localids')]">
                                    <logger level="INFO" doc:name="Logger"/>
                                </when>
                                <otherwise>
                                    <set-variable variableName="dc_identifier_cpid" value="#[payload['value']['attributeValueList'][0]['value']]" doc:name="Set dc_identifier_cpid with first value"/>
                                </otherwise>
                            </choice>
                        </foreach>
                        <db:insert config-ref="POSTGRESQL_Connection" doc:name="Insert into DB">
                            <db:parameterized-query><![CDATA[INSERT INTO reporting
(pid, dc_identifier_cpid, archive_date, correlation_id) 
VALUES(#[flowVars.pid], #[flowVars.dc_identifier_cpid], #[flowVars.archiveDate], #[flowVars.correlation_id]);]]></db:parameterized-query>
                        </db:insert>
                    </otherwise>
                </choice>
            </foreach>
        </foreach>
        <logger level="INFO" doc:name="X rows were processed" message="#[flowVars.totalCount + &quot; rows were processed&quot;]"/>
        <dw:transform-message doc:name="Build response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
    "correlation_id": flowVars.correlation_id,
    "requestor": flowVars.requestor,
    "datetime_from": flowVars.startDate,
    "datetime_to": flowVars.endDate,
    "tenant": flowVars.tenant,
    "result_status": "SUCCESS",
    "result_comment": "",
    "result_total": flowVars.totalCount
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <choice doc:name="Set routingKey for certain requestors">
            <when expression="#[flowVars.requestor.equals('provant')]">
                <set-variable variableName="routingKey" value="provant" doc:name="Set routingKey as provant"/>
            </when>
            <otherwise>
                <set-variable variableName="routingKey" value="#[&quot;&quot;]" doc:name="Set routingKey empty"/>
            </otherwise>
        </choice>
        <amqp:outbound-endpoint exchangeName="${rabbit.jobexchange}" exchangeType="fanout" responseTimeout="10000" connector-ref="send_responses" doc:name="Send reponse" routingKey="#[flowVars.routingKey]" exchangeDurable="true"/>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
    </flow>
    <flow name="reporting_genericFlow">
        <dw:transform-message doc:name="Transform startDate and endDate to mediahaven date format">
            <dw:input-variable doc:sample="json.json" variableName="dateFrom"/>
            <dw:input-variable doc:sample="json_1.json" variableName="dateTo"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%type mediahavendate = :string { format: "yyyy:MM:dd HH:mm:ss" }
---
using (
	startDate = (flowVars.dateFrom as :localdatetime { format: "yyyy-MM-dd HH:mm:ss" }),
	endDate = (flowVars.dateTo as :localdatetime { format: "yyyy-MM-dd HH:mm:ss" })
) {
	startDate: startDate as :mediahavendate,
	endDate: endDate as :mediahavendate
}]]></dw:set-payload>
        </dw:transform-message>
        <set-variable variableName="startDate" value="#[payload.startDate]" doc:name="Set startDate"/>
        <set-variable variableName="endDate" value="#[payload.endDate]" doc:name="Set endDate"/>
    </flow>
    <sub-flow name="initialize_variables">
        <set-variable variableName="correlation_id" value="#[payload.correlation_id]" doc:name="Set correlation_id"/>
        <set-variable variableName="requestor" value="#[payload.requestor]" doc:name="Set requestor"/>
        <set-variable variableName="dateFrom" value="#[payload.datetime_from == null ? &quot;0001:01:01 00:00:00&quot; : payload.datetime_from]" doc:name="Set dateFrom"/>
        <set-variable variableName="dateTo" value="#[payload.datetime_to == null ? server.dateTime.format(&quot;YYYY:MM:dd HH:mm:ss&quot;) : payload.datetime_to]" doc:name="Set dateTo"/>
        <set-variable variableName="tenant" value="#[payload.tenant == null ? null : payload.tenant]" doc:name="Set tenant"/>
        <set-variable variableName="currentTime" value="#[server.dateTime.format(&quot;YYYY_MM_dd_HH_mm_ss&quot;)]" doc:name="Set currentTime"/>
        <set-variable variableName="authKey" value="${mediahavenapi.base64}" doc:name="Set authKey"/>
    </sub-flow>
</mule>
